import{_ as n,o as s,c as a,d as e}from"./app-40c92080.js";const t={},p=e(`<h2 id="_1-about-laravel" tabindex="-1"><a class="header-anchor" href="#_1-about-laravel" aria-hidden="true">#</a> 1. About Laravel</h2><p>Laravel is a powerful PHP framework known for its expressive syntax and extensive feature set. It follows the MVC pattern and provides a robust ecosystem for web application development.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Route definition in web.php</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">UserController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-general-php-rules" tabindex="-1"><a class="header-anchor" href="#_2-general-php-rules" aria-hidden="true">#</a> 2. General PHP Rules</h2><p>Follow PHP coding standards and best practices, such as using proper indentation, consistent naming conventions, and meaningful variable and function names.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good example</span>
<span class="token variable">$firstName</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$lastName</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Doe&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Bad example</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Doe&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-typed-properties" tabindex="-1"><a class="header-anchor" href="#_3-typed-properties" aria-hidden="true">#</a> 3. Typed Properties</h2><p>PHP 7.4 introduced typed properties, allowing you to specify the type of a property explicitly.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$age</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-enums" tabindex="-1"><a class="header-anchor" href="#_4-enums" aria-hidden="true">#</a> 4. Enums</h2><p>Enums in PHP allow you to define a fixed set of named values.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">enum</span> <span class="token class-name-definition class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">RED</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">GREEN</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">BLUE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Usage</span>
<span class="token variable">$color</span> <span class="token operator">=</span> <span class="token class-name static-context">Color</span><span class="token operator">::</span><span class="token constant">RED</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-docblocks" tabindex="-1"><a class="header-anchor" href="#_5-docblocks" aria-hidden="true">#</a> 5. Docblocks</h2><p>Docblocks are comments used to document code and provide important information about classes, methods, and properties.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Represents a user in the system.
 */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Get the user&#39;s full name.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span> The full name.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">firstName</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; &#39;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lastName</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-docblocks-for-iterables" tabindex="-1"><a class="header-anchor" href="#_6-docblocks-for-iterables" aria-hidden="true">#</a> 6. Docblocks for Iterables</h2><p>When documenting iterables, you can use <code>iterable</code> as the type hint in your docblocks.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Process a list of items.
 *
 * <span class="token keyword">@param</span> <span class="token class-name">iterable</span> <span class="token parameter">$items</span> The items to process.
 */</span>
<span class="token keyword">function</span> <span class="token function-definition function">processItems</span><span class="token punctuation">(</span><span class="token keyword type-hint">iterable</span> <span class="token variable">$items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Process each item</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-constructor-property-promotion" tabindex="-1"><a class="header-anchor" href="#_7-constructor-property-promotion" aria-hidden="true">#</a> 7. Constructor Property Promotion</h2><p>Constructor property promotion allows you to declare and initialize class properties directly in the constructor&#39;s parameter list.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>
        <span class="token keyword">public</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span>
        <span class="token keyword">public</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$age</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-traits" tabindex="-1"><a class="header-anchor" href="#_8-traits" aria-hidden="true">#</a> 8. Traits</h2><p>Traits provide a way to reuse code across multiple classes by using horizontal code reuse.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">trait</span> <span class="token class-name-definition class-name">Loggable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Log the message</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Loggable</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-strings" tabindex="-1"><a class="header-anchor" href="#_9-strings" aria-hidden="true">#</a> 9. Strings</h2><p>Strings are an important part of PHP. You can manipulate strings using various built-in functions and operators.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;John Doe&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the length of the string</span>

<span class="token variable">$lowercase</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Convert to lowercase</span>
<span class="token variable">$uppercase</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Convert to uppercase</span>

<span class="token variable">$substring</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get a substring</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-ternary-operators" tabindex="-1"><a class="header-anchor" href="#_10-ternary-operators" aria-hidden="true">#</a> 10. Ternary Operators</h2><p>The ternary operator is a shorthand syntax for expressing conditional statements.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$status</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$isActive</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39;Active&#39;</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Inactive&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_11-if-statements" tabindex="-1"><a class="header-anchor" href="#_11-if-statements" aria-hidden="true">#</a> 11. If Statements</h2><p>If statements allow you to conditionally execute blocks of code based on a specified condition.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;You are an adult&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;You are a minor&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-comments" tabindex="-1"><a class="header-anchor" href="#_12-comments" aria-hidden="true">#</a> 12. Comments</h2><p>Comments</p><p>are essential for documenting code and providing additional context.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Calculate the total price</span>
<span class="token variable">$total</span> <span class="token operator">=</span> <span class="token variable">$price</span> <span class="token operator">*</span> <span class="token variable">$quantity</span><span class="token punctuation">;</span>

<span class="token comment">// Log a warning message</span>
<span class="token comment">// This code needs to be refactored for performance</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-test-classes" tabindex="-1"><a class="header-anchor" href="#_13-test-classes" aria-hidden="true">#</a> 13. Test Classes</h2><p>Writing tests is crucial for ensuring the quality and reliability of your application.</p><p>Example (PHPUnit):</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">PHPUnit<span class="token punctuation">\\</span>Framework<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testAddition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-whitespace" tabindex="-1"><a class="header-anchor" href="#_14-whitespace" aria-hidden="true">#</a> 14. Whitespace</h2><p>Use whitespace effectively to improve code readability.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good example</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Code block</span>
<span class="token punctuation">}</span>

<span class="token comment">// Bad example</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// Code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-configuration" tabindex="-1"><a class="header-anchor" href="#_15-configuration" aria-hidden="true">#</a> 15. Configuration</h2><p>Laravel provides a configuration system for managing various aspects of your application.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Accessing configuration values</span>
<span class="token variable">$apiKey</span> <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;services.api.key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Modifying configuration values</span>
<span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;app.timezone&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;UTC&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-artisan-commands" tabindex="-1"><a class="header-anchor" href="#_16-artisan-commands" aria-hidden="true">#</a> 16. Artisan Commands</h2><p>Artisan is the command-line interface included with Laravel, providing various pre-built commands.</p><p>Example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate      <span class="token comment"># Run database migrations</span>
php artisan make:controller MyController      <span class="token comment"># Generate a new controller</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-routing" tabindex="-1"><a class="header-anchor" href="#_17-routing" aria-hidden="true">#</a> 17. Routing</h2><p>Laravel&#39;s routing system allows you to define URL routes and map them to specific actions.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">UserController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_18-controllers" tabindex="-1"><a class="header-anchor" href="#_18-controllers" aria-hidden="true">#</a> 18. Controllers</h2><p>Controllers handle the logic for processing requests and returning responses.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get all users from the database</span>
        <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Return the users view</span>
        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;users&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$users</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-views" tabindex="-1"><a class="header-anchor" href="#_19-views" aria-hidden="true">#</a> 19. Views</h2><p>Views in Laravel generate the HTML output that is sent to the user&#39;s browser.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Display a user&#39;s profile</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.show&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-validation" tabindex="-1"><a class="header-anchor" href="#_20-validation" aria-hidden="true">#</a> 20. Validation</h2><p>Laravel provides a validation system for validating user input.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">store</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$validatedData</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|string&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|email|unique:users&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|min:8&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process the validated data</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-blade-templates" tabindex="-1"><a class="header-anchor" href="#_21-blade-templates" aria-hidden="true">#</a> 21. Blade Templates</h2><p>Blade is Laravel&#39;s templating engine, allowing you to write expressive and reusable templates.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Display the user&#39;s name <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Conditional rendering <span class="token operator">--</span><span class="token operator">&gt;</span>
@<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$isAdmin</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>You have admin privileges<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
@<span class="token keyword">endif</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-authorization" tabindex="-1"><a class="header-anchor" href="#_22-authorization" aria-hidden="true">#</a> 22. Authorization</h2><p>Laravel provides an authorization system for managing user permissions and access control.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">can</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;create&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// User has permission to create a post</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// User does not have permission</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-translations" tabindex="-1"><a class="header-anchor" href="#_23-translations" aria-hidden="true">#</a> 23. Translations</h2><p>Laravel offers a localization system for translating your application&#39;s text.</p><p>Example:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Accessing translated strings</span>
<span class="token keyword">echo</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;messages.welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Pluralization</span>
<span class="token keyword">echo</span> <span class="token function">trans_choice</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;messages.apples&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-naming-classes" tabindex="-1"><a class="header-anchor" href="#_24-naming-classes" aria-hidden="true">#</a> 24. Naming Classes</h2><p>Follow naming conventions for classes, using descriptive and meaningful names.</p><p>Example</p><p>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ProductRepository</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98),i=[p];function o(l,c){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","laravel-coding-guidelines.html.vue"]]);export{d as default};
